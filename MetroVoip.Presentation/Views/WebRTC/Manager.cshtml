<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yönetici Paneli</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- SignalR Kütüphanesi -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/signalr/5.0.11/signalr.min.js"></script>
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Yönetici Paneli</h1>

        <!-- Bağlanan Konuşmacılar Bölümü -->
        <h3>Bağlanan Konuşmacılar</h3>
        <form id="peer-form">
            <div class="list-group" id="available-peer-list"></div>
            <button type="button" class="btn btn-primary mt-3" id="connect-button">Bağla</button>
        </form>

        <!-- Aktif Gruplar Bölümü -->
        <h3 class="mt-5">Aktif Gruplar</h3>
        <div class="list-group" id="active-group-list"></div>

        <!-- Yeni Eklenen Bölüm: Aktif Gruplara Yeni Konuşmacılar Ekleme -->
        <h3 class="mt-5">Gruplara Yeni Konuşmacılar Ekle</h3>
        <form id="add-peer-form">
            <div class="mb-3">
                <label for="select-group" class="form-label">Grup Seçin</label>
                <select class="form-select" id="select-group">
                    <option value="" disabled selected>Grup seçin</option>
                </select>
            </div>
            <div class="list-group mb-3" id="available-peer-add-list"></div>
            <button type="button" class="btn btn-success" id="add-peers-button">Konuşmacıları Ekle</button>
        </form>
    </div>

    <!-- Bootstrap JS (İsteğe Bağlı) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        const connection = new signalR.HubConnectionBuilder().withUrl("/voiceChatHub").build();

        connection.start().then(() => {
            console.log("Yönetici olarak bağlanıldı.");
            connection.invoke("RegisterAdmin").catch(err => console.error("RegisterAdmin hatası:", err));
        }).catch(err => console.error("SignalR bağlantı hatası:", err));

        // Bağlanan kullanıcılar listesi güncellendiğinde listede göster
        connection.on("UpdatePeerList", (peers) => {
            const availablePeerList = document.getElementById('available-peer-list');
            availablePeerList.innerHTML = '';  // Listeyi temizle

            peers.forEach(peerId => {
                const listItem = document.createElement('div');
                listItem.className = 'list-group-item d-flex justify-content-between align-items-center';
                listItem.innerHTML = `
                                        <div>
                                            <input class="form-check-input me-2 peer-checkbox" type="checkbox" value="${peerId}" id="checkbox-${peerId}">
                                            <label class="form-check-label" for="checkbox-${peerId}">
                                                ${peerId}
                                            </label>
                                        </div>
                                    `;
                availablePeerList.appendChild(listItem);
            });

            // Aynı peer'ları ekleme formunda da güncelle
            const availablePeerAddList = document.getElementById('available-peer-add-list');
            availablePeerAddList.innerHTML = '';  // Listeyi temizle

            peers.forEach(peerId => {
                const listItem = document.createElement('div');
                listItem.className = 'list-group-item d-flex justify-content-between align-items-center';
                listItem.innerHTML = `
                                        <div>
                                            <input class="form-check-input me-2 peer-checkbox-add" type="checkbox" value="${peerId}" id="add-checkbox-${peerId}">
                                            <label class="form-check-label" for="add-checkbox-${peerId}">
                                                ${peerId}
                                            </label>
                                        </div>
                                    `;
                availablePeerAddList.appendChild(listItem);
            });
        });

        // Aktif gruplar güncellendiğinde listede göster
        connection.on("UpdateActiveGroups", (groups) => {
            const activeGroupList = document.getElementById('active-group-list');
            activeGroupList.innerHTML = '';  // Listeyi temizle

            const selectGroup = document.getElementById('select-group');
            selectGroup.innerHTML = '<option value="" disabled selected>Grup seçin</option>'; // Temizle

            // Gelen grup verisi hem grup ismi hem de kullanıcı listesi içerecek
            Object.keys(groups).forEach(groupName => {
                const listItem = document.createElement('div');
                listItem.className = 'list-group-item d-flex justify-content-between align-items-center';

                // Gruba ait kullanıcıları virgülle ayırarak yazdır
                const groupMembers = groups[groupName].join(", ");

                listItem.innerHTML = `
                    <span><strong>Grup:</strong> ${groupName} <br> <strong>Üyeler:</strong> ${groupMembers}</span>
                    <button class="btn btn-danger btn-sm end-group-button" data-group="${groupName}">Sonlandır</button>
                    `;
                activeGroupList.appendChild(listItem);

                // Select input için seçenek ekle
                const option = document.createElement('option');
                option.value = groupName;
                option.textContent = `${groupName} (Üyeler: ${groupMembers})`;
                selectGroup.appendChild(option);
            });

            // "Sonlandır" butonlarına event listener ekle
            document.querySelectorAll('.end-group-button').forEach(button => {
                button.addEventListener('click', () => {
                    const groupName = button.getAttribute('data-group');
                    if (confirm(`"${groupName}" adlı grubu sonlandırmak istediğinize emin misiniz?`)) {
                        connection.invoke("EndVoiceCommunication", groupName)
                            .catch(err => console.error("EndVoiceCommunication hatası:", err));
                    }
                });
            });
        });

        // "Bağla" butonuna tıklandığında
        document.getElementById('connect-button').addEventListener('click', () => {
            const selectedPeers = Array.from(document.querySelectorAll('.peer-checkbox:checked'))
                .map(input => input.value);

            if (selectedPeers.length > 1) {
                console.log("Seçilen Peer'lar:", selectedPeers);
                connection.invoke("StartVoiceCommunication", selectedPeers)
                    .catch(err => console.error("StartVoiceCommunication hatası:", err));
            } else {
                alert("Lütfen en az iki konuşmacı seçin.");
            }
        });

        // Yeni Eklenen: "Konuşmacıları Ekle" butonuna tıklandığında
        document.getElementById('add-peers-button').addEventListener('click', () => {
            const selectedGroup = document.getElementById('select-group').value;
            if (!selectedGroup) {
                alert("Lütfen bir grup seçin.");
                return;
            }

            const selectedPeers = Array.from(document.querySelectorAll('.peer-checkbox-add:checked'))
                .map(input => input.value);

            if (selectedPeers.length < 1) {
                alert("Lütfen en az bir konuşmacı seçin.");
                return;
            }

            console.log(`Grup "${selectedGroup}" için seçilen yeni Peer'lar:`, selectedPeers);
            connection.invoke("AddPeersToGroup", selectedGroup, selectedPeers)
                .catch(err => console.error("AddPeersToGroup hatası:", err));
        });
    </script>
</body>
</html>
