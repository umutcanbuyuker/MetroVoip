<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PeerJS SignalR Sesli Konuşma</title>
</head>
<body>
    <h2>PeerJS SignalR Sesli Görüşme</h2>

    <div>
        <label for="peer-id">Kendi Peer ID:</label>
        <input type="text" id="peer-id" disabled>
    </div>

    <div>
        <h3>Bağlı Kullanıcılar:</h3>
        <ul id="peer-list"></ul>
    </div>

    <!-- Gelen ses akışlarını gösterecek dinamik bir container -->
    <div id="remote-audio-container"></div>


    <!-- SignalR ve PeerJS kütüphaneleri -->
    <script src="https://cdn.jsdelivr.net/npm/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.12/signalr.min.js"></script>

    <script>
        const peer = new Peer();  // PeerJS istemcisi başlatılıyor
        const peerIdInput = document.getElementById('peer-id');
        const peerList = document.getElementById('peer-list');
        const remoteAudioContainer = document.getElementById('remote-audio-container');
        let currentPeerId = ''; // Kendi Peer ID'mizi saklamak için
        let mediaStream = null; // Kullanıcı mikrofon akışı

        const connection = new signalR.HubConnectionBuilder().withUrl("/voiceChatHub").build(); // SignalR bağlantısı

        // Kendi Peer ID'mizi alıyoruz ve ekrana yazıyoruz
        peer.on('open', (id) => {
            currentPeerId = id;  // Kendi Peer ID'mizi saklıyoruz
            peerIdInput.value = id;

            // SignalR üzerinden sunucuya Peer ID'mizi kaydediyoruz
            connection.start().then(() => {
                connection.invoke("RegisterPeer", id);
            });
        });

        // SignalR'dan Peer ID listesi güncellemesi alındığında listeyi ekranda güncelliyoruz
        connection.on("UpdatePeerList", (peers) => {
            peerList.innerHTML = ''; // Listeyi temizle

            peers.forEach(peerId => {
                // Kendi Peer ID'mizi kontrol edip listeye eklemiyoruz
                if (peerId !== currentPeerId) {
                    const listItem = document.createElement('li');
                    listItem.textContent = peerId;

                    const callButton = document.createElement('button');
                    callButton.textContent = 'Bağlan';
                    callButton.onclick = () => initiateCall(peerId);

                    listItem.appendChild(callButton);
                    peerList.appendChild(listItem);
                }
            });
        });

        // Sesli arama başlatma fonksiyonu
        function initiateCall(peerId) {
            // Mikrofon erişimini al
            navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
                mediaStream = stream;  // Mikrofon akışını sakla
                const call = peer.call(peerId, stream);

                // Karşı tarafın ses akışını dinleyip çalıyoruz
                call.on('stream', (remoteStream) => {
                    addRemoteStream(remoteStream, peerId);
                });
            }).catch((err) => {
                console.error('Mikrofon hatası:', err);
            });
        }

        // Diğer kullanıcı bizi aradığında cevaplama
        peer.on('call', (call) => {
            if (mediaStream) {
                call.answer(mediaStream);  // Ses akışımızı gönderiyoruz
            }

            // Karşı tarafın ses akışını dinleyip çalıyoruz
            call.on('stream', (remoteStream) => {
                addRemoteStream(remoteStream, call.peer);
            });
        });

        // Gelen ses akışını oynatma fonksiyonu
        function addRemoteStream(remoteStream, peerId) {
            let audioElement = document.getElementById(`audio-${peerId}`);

            // Eğer o kullanıcı için zaten bir ses elemanı varsa tekrar eklemiyoruz
            if (!audioElement) {
                audioElement = document.createElement('audio');
                audioElement.id = `audio-${peerId}`;
                audioElement.controls = true;
                audioElement.autoplay = true;
                remoteAudioContainer.appendChild(audioElement);
            }

            // Yeni gelen ses akışını ses elementine bağla
            audioElement.srcObject = remoteStream;
        }

    </script>
</body>
</html>
