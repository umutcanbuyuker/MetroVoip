<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Konuşmacı Paneli</title>
    <!-- SignalR ve PeerJS Kütüphaneleri -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/signalr/5.0.11/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/peerjs@1.3.1/dist/peerjs.min.js"></script>
</head>
<body>
    <h1>Konuşmacı Paneli</h1>
    <p>Peer ID'niz: <span id="peer-id"></span></p>

    <!-- Gelen ses akışlarını gösterecek container -->
    <div id="remote-audio-container"></div>

    <script>
        // PeerJS Başlatılıyor
        const peer = new Peer();

        // SignalR Bağlantısı
        const connection = new signalR.HubConnectionBuilder().withUrl("/voiceChatHub").build();
        let peerId = null;
        let groupConnections = {}; // Grup bazlı peer'larla olan bağlantıları saklamak için
        let localStream = null; // Yerel medya akışını saklamak için

        // PeerJS Bağlantısı Açıldığında
        peer.on('open', (id) => {
            peerId = id;
            document.getElementById('peer-id').textContent = peerId;
            console.log("PeerJS bağlantısı açıldı. Peer ID:", peerId);

            // SignalR Bağlantısını Başlat ve Peer ID'yi Kaydet
            connection.start().then(() => {
                console.log("SignalR bağlantısı kuruldu.");
                connection.invoke("RegisterPeer", peerId).catch(err => console.error("SignalR RegisterPeer hatası:", err));
            }).catch(err => console.error("SignalR bağlantı hatası:", err));
        });

        // Gelen PeerJS Çağrılarını Yönetme
        peer.on('call', (call) => {
            console.log(`Incoming call from ${call.peer}`);
            // Mikrofon erişimi isteyin
            navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
                // Yerel medya akışını sakla
                if (!localStream) {
                    localStream = stream;
                }

                call.answer(stream); // Çağrıya cevap ver

                call.on('stream', (remoteStream) => {
                    console.log(`Receiving stream from ${call.peer}`);
                    addRemoteStream(remoteStream, call.peer);
                });

                call.on('close', () => {
                    console.log(`Call with ${call.peer} closed.`);
                    removeRemoteStream(call.peer);
                });

                call.on('error', (err) => {
                    console.error(`Call error with ${call.peer}:`, err);
                });
            }).catch((err) => {
                console.error('Mikrofon hatası:', err);
            });
        });

        // SignalR'dan "StartVoiceCall" Mesajını Alma
        connection.on("StartVoiceCall", (selectedPeers, groupName) => {
            if (selectedPeers.includes(peerId)) {
                console.log("Bağlantı başlatılıyor:", selectedPeers, "Group:", groupName);
                startCallWithPeers(selectedPeers, groupName);
            }
        });

        // SignalR'dan "EndVoiceCall" Mesajını Alma
        connection.on("EndVoiceCall", (groupName) => {
            console.log(`Grup "${groupName}" sonlandırılıyor.`);
            endVoiceCall(groupName);
        });

        // Seçilen Peer'larla Bağlantı Başlatma Fonksiyonu
        function startCallWithPeers(peers, groupName) {
            // Mikrofon akışını al veya mevcut akışı kullan
            if (!localStream) {
                navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
                    localStream = stream;
                    initiateCalls(peers, groupName);
                }).catch((err) => {
                    console.error('Mikrofon hatası:', err);
                });
            } else {
                initiateCalls(peers, groupName);
            }
        }

        // Çağrıları Başlatma Fonksiyonu
        function initiateCalls(peers, groupName) {
            console.log("Local audio stream kullanılarak çağrılar başlatılıyor.");
            // Grup için bağlantı saklamak üzere groupConnections sözlüğüne grup ekle
            if (!groupConnections[groupName]) {
                groupConnections[groupName] = {};
            }

            // Seçilen her peer'a bağlan
            peers.forEach((targetPeerId) => {
                if (targetPeerId !== peerId && !(targetPeerId in groupConnections[groupName])) {
                    console.log(`Calling peer: ${targetPeerId}`);
                    const call = peer.call(targetPeerId, localStream);
                    groupConnections[groupName][targetPeerId] = call;

                    call.on('stream', (remoteStream) => {
                        console.log(`Receiving stream from ${targetPeerId}`);
                        addRemoteStream(remoteStream, targetPeerId);
                    });

                    call.on('close', () => {
                        console.log(`Call with ${targetPeerId} closed.`);
                        removeRemoteStream(targetPeerId);
                        delete groupConnections[groupName][targetPeerId];
                    });

                    call.on('error', (err) => {
                        console.error(`Call error with ${targetPeerId}:`, err);
                    });
                }
            });
        }

        // Remote Stream'i Ekleme Fonksiyonu
        function addRemoteStream(remoteStream, peerId) {
            let audioElement = document.getElementById(`audio-${peerId}`);
            if (!audioElement) {
                audioElement = document.createElement('audio');
                audioElement.id = `audio-${peerId}`;
                audioElement.controls = true;
                audioElement.autoplay = true;
                audioElement.srcObject = remoteStream;
                document.getElementById('remote-audio-container').appendChild(audioElement);
                console.log(`Remote audio element eklendi: ${peerId}`);
            }
        }

        // Remote Stream'i Kaldırma Fonksiyonu
        function removeRemoteStream(peerId) {
            const audioElement = document.getElementById(`audio-${peerId}`);
            if (audioElement) {
                audioElement.srcObject = null;
                audioElement.remove();
                console.log(`Remote audio element kaldırıldı: ${peerId}`);
            }
        }

        // Sesli iletişimi sonlandırma fonksiyonu
        function endVoiceCall(groupName) {
            console.log(`Grup "${groupName}" için bağlantılar sonlandırılıyor.`);
            if (groupConnections[groupName]) {
                // Grup içindeki tüm bağlantıları kapat
                for (const [targetPeerId, call] of Object.entries(groupConnections[groupName])) {
                    call.close();
                    removeRemoteStream(targetPeerId);
                    delete groupConnections[groupName][targetPeerId];
                    console.log(`Bağlantı kapatıldı: ${targetPeerId}`);
                }
                // Grup bağlantılarını temizle
                delete groupConnections[groupName];
                console.log(`Grup "${groupName}" sonlandırıldı.`);
            }

            // Yerel medya akışını durdur
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localStream = null;
                console.log("Yerel medya akışı durduruldu ve mikrofon kapatıldı.");
            }
        }

        // Sayfa kapatıldığında veya yeniden yüklendiğinde yerel medya akışını durdur
        window.addEventListener('beforeunload', () => {
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
            }
        });
    </script>
</body>
</html>
