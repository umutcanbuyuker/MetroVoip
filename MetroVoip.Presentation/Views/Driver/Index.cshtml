<div class="row">
    <div class="col-md-8 offset-2">
        <div id="connectionState">
        </div>
        <div class="mb-3">
        </div>
        <hr />
        <hr />
        <div class="clearfix"></div>
        <div class="col-md-8">
        </div>
    </div>
</div>

<button id="cabin-1" class="speakButton btn btn-primary" data-kabin="1">Kabin 1</button>
<button id="cabin-2" class="speakButton btn btn-primary" data-kabin="2">Kabin 2</button>
<button id="cabin-3" class="speakButton btn btn-primary" data-kabin="3">Kabin 3</button>
<button id="cabin-4" class="speakButton btn btn-primary" data-kabin="4">Kabin 4</button>


@*Sürücünün kabindeki yolcu ile iletişimini sağlayan fonksiyonlar.*@
<script>
    const speakButtons = document.querySelectorAll(".speakButton");
    let activeKabin = null;

    speakButtons.forEach(button => {
        button.addEventListener("mousedown", function () {
            activeKabin = this.getAttribute("data-kabin");
            startSpeaking(activeKabin);
        });

        button.addEventListener("mouseup", function () {
            stopSpeaking(activeKabin);
        });
    });

    function startSpeaking(kabin) {
        $.ajax({
            url: '@Url.Action("StartSpeakingWithPassenger", "Driver")',
            type: 'POST',
            data: { kabinId: kabin },
            success: function (response) {
                console.log(`Kabin ${kabin} ile konuşma başlatıldı.`);
            },
            error: function (error) {
                console.log("Hata:", error);
            }
        });
    }

    function stopSpeaking(kabin) {
        $.ajax({
            url: '@Url.Action("StopSpeakingWithPassenger", "Driver")',
            type: 'POST',
            data: { kabinId: kabin },
            success: function (response) {
                console.log(`Kabin ${kabin} ile konuşma durduruldu.`);
            },
            error: function (error) {
                console.log("Hata:", error);
            }
        });
    }

    function startListening(kabin) {
    $.ajax({
        url: '@Url.Action("StartListeningPassenger", "Driver")',
        type: 'POST',
        data: { kabinId: kabin },
        success: function (response) {
            console.log(`Kabin ${kabin} dinlemeye başlandı`);
        },
        error: function (error) {
            console.log("Hata:", error);
        }
    });
}
</script>
@*SignalR ile yolcu tarafından bağlantı durumu ve isteği geldiğini görüntüle*@
<script>
    // SignalR bağlantısını başlat
    const connection = new signalR.HubConnectionBuilder().withUrl("/driverHub").build();

    function ShowConnectionState() {
        $('#connectionState').html(`<div class="alert alert-success">Bağlantı Başarılı</div>`);
    }


    connection.start().then(() => {
        ShowConnectionState();
    }).catch((err) => {
        ShowConnectionState();
        console.log('Hata : ');
    });

    $('.speakButton').mousedown(function () {
        var kabinNumarasi = $(this).data('kabin');
        // Tıklama sırasında kabin numarasını gönder
        connection.invoke("SendDriverRequestAsync", kabinNumarasi);
    });

    connection.on("ReceiveCabinRequest", function (cabinId) {
        // Gelen kabin isteğiyle ilgili butonun rengini değiştir
        $("#cabin-" + cabinId).removeClass("btn-primary").addClass("btn-warning");
        startListening(cabinId);
    });

    connection.on("ReceiveCabinRelease", function (cabinId) {
        // Gelen kabin isteğiyle ilgili butonun rengini değiştir
        $("#cabin-" + cabinId).removeClass("btn-warning").addClass("btn-primary");
    });
</script>