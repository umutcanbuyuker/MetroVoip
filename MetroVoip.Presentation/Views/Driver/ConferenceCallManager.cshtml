<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - PeerJS SignalR Sesli Görüşme</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container">
        <h2>Admin - PeerJS SignalR Sesli Görüşme</h2>

        <div>
            <label for="peer-id">Kendi Peer ID:</label>
            <input type="text" id="peer-id" class="form-control" disabled>
        </div>

        <div class="mt-3">
            <h3>Bağlı Kullanıcılar (İsim ve Peer ID):</h3>
            <ul id="peer-list" class="list-group"></ul>
        </div>

        <div class="mt-3">
            <h4>Seçilen Kullanıcılar:</h4>
            <ul id="selected-peer-list" class="list-group"></ul>
            <button class="btn btn-primary mt-2" id="start-conference">Görüşme Başlat</button>
        </div>

        <div id="remote-audio-container" class="mt-5">
            <h4>Ses Akışları:</h4>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.12/signalr.min.js"></script>

    <script>
        const peer = new Peer();
        const peerIdInput = document.getElementById('peer-id');
        const peerList = document.getElementById('peer-list');
        const selectedPeerList = document.getElementById('selected-peer-list');
        const remoteAudioContainer = document.getElementById('remote-audio-container');
        let currentPeerId = '';
        let mediaStream = null;
        let selectedPeers = [];

        const connection = new signalR.HubConnectionBuilder().withUrl("/driverHub").build();

        // Peer ID generation and server registration
        peer.on('open', (id) => {
            currentPeerId = id;
            peerIdInput.value = id;
            connection.start().then(() => {
                connection.invoke("RegisterPeer", id);
            });
        });

        // Update peer list with names
        connection.on("UpdatePeerList", (peers) => {
            peerList.innerHTML = '';
            peers.forEach(peer => {
                if (peer.id !== currentPeerId) {
                    const listItem = document.createElement('li');
                    listItem.classList.add('list-group-item');
                    listItem.textContent = `${peer.name} (ID: ${peer.id})`;

                    const selectButton = document.createElement('button');
                    selectButton.textContent = 'Seç';
                    selectButton.classList.add('btn', 'btn-secondary', 'ms-3');
                    selectButton.onclick = () => selectPeer(peer.id);

                    listItem.appendChild(selectButton);
                    peerList.appendChild(listItem);
                }
            });
        });

        function selectPeer(peerId) {
            if (!selectedPeers.includes(peerId)) {
                selectedPeers.push(peerId);
                const selectedItem = document.createElement('li');
                selectedItem.classList.add('list-group-item');
                selectedItem.textContent = peerId;
                selectedPeerList.appendChild(selectedItem);
            }
        }

        document.getElementById('start-conference').onclick = function () {
            if (selectedPeers.length > 0) {
                startConferenceCall();
            }
        };

        function startConferenceCall() {
            navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
                mediaStream = stream;
                selectedPeers.forEach(peerId => {
                    const call = peer.call(peerId, stream);
                    call.on('stream', (remoteStream) => {
                        addRemoteStream(remoteStream, peerId);
                    });
                });
            }).catch((err) => {
                console.error('Mikrofon hatası:', err);
            });
        }

        peer.on('call', (call) => {
            call.answer(mediaStream);
            call.on('stream', (remoteStream) => {
                addRemoteStream(remoteStream, call.peer);
            });
        });

        function addRemoteStream(remoteStream, peerId) {
            let audioElement = document.getElementById(`audio-${peerId}`);
            if (!audioElement) {
                audioElement = document.createElement('audio');
                audioElement.id = `audio-${peerId}`;
                audioElement.controls = true;
                audioElement.autoplay = true;
                remoteAudioContainer.appendChild(audioElement);
            }
            audioElement.srcObject = remoteStream;
        }
    </script>
</body>
</html>
